{"version":3,"sources":["calendar.tsx"],"names":["React","useState","useMemo","useCallback","memo","useRef","createWholeWeek","formatDate","createWholeWeeks","itemWidht","createNextTwoWeeks","createPreviousTwoWeeks","screenWidth","colors","styles","createLocalWeek","Header","WeekItem","View","FlatList","unstable_batchedUpdates","Text","format","CalendarComponent","date","language","onPressDate","selectedColor","showMonth","showHeader","selectedDate","setSelectedDate","appearDate","setAppearDate","flatListRef","getWholeWeek","wholeWeek","getWholeWeeks","wholeWeeks","selectDate","d","weeks","setWeeks","endReach","n","slice","w","momentumEnd","event","widthFromStart","nativeEvent","contentOffset","x","b","current","scrollToIndex","animated","index","currentPage","layoutMeasurement","width","localMonth","locale","backgroundColor","white","paddingTop","paddingBottom","shadow","alignSelf","paddingVertical","fontSize","_","length","offset","item","toDateString"],"mappings":"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","sourcesContent":["import React, {\n  FC,\n  useState,\n  useMemo,\n  useCallback,\n  memo,\n  useRef,\n  LegacyRef,\n} from 'react';\nimport {\n  CalendarProps,\n  createWholeWeek,\n  formatDate,\n  createWholeWeeks,\n  itemWidht,\n  ScrollEvent,\n  createNextTwoWeeks,\n  createPreviousTwoWeeks,\n  screenWidth,\n  colors,\n  styles,\n  createLocalWeek,\n} from '../lib';\nimport { Header } from './header';\nimport { WeekItem } from './weekItem';\nimport { View, FlatList, unstable_batchedUpdates, Text } from 'react-native';\nimport { format } from 'date-fns';\n\nexport const CalendarComponent: FC<CalendarProps> = memo(\n  ({ date, language, onPressDate, selectedColor, showMonth }) => {\n    const showHeader = showMonth ?? true;\n    const [selectedDate, setSelectedDate] = useState(date);\n    // to get current page's month\n    const [appearDate, setAppearDate] = useState(date);\n    const flatListRef: LegacyRef<any> = useRef<FlatList>();\n    const getWholeWeek = useCallback(createWholeWeek, [createWholeWeek]);\n    const wholeWeek = useMemo(() => {\n      return getWholeWeek(selectedDate);\n    }, [selectedDate, getWholeWeek]);\n    const getWholeWeeks = useCallback(createWholeWeeks, [createWholeWeeks]);\n    const wholeWeeks = useMemo(() => {\n      return getWholeWeeks(selectedDate, wholeWeek);\n    }, [selectedDate, wholeWeek]);\n\n    const selectDate = useCallback(\n      (d: Date) => {\n        onPressDate(d);\n      },\n      [onPressDate],\n    );\n\n    const [weeks, setWeeks] = useState(wholeWeeks);\n\n    const endReach = useCallback(() => {\n      const n = createNextTwoWeeks(weeks.slice(-1)[0], []);\n      setWeeks(w => {\n        return [...w, ...n];\n      });\n    }, [weeks, createNextTwoWeeks, setWeeks]);\n\n    const momentumEnd = useCallback(\n      (event: ScrollEvent) => {\n        const widthFromStart = event.nativeEvent.contentOffset.x;\n        if (widthFromStart < screenWidth) {\n          const b = createPreviousTwoWeeks(weeks[0], []);\n          unstable_batchedUpdates(() => {\n            setWeeks(w => {\n              return [...b, ...w];\n            });\n            flatListRef.current.scrollToIndex({ animated: false, index: 14 });\n          });\n        }\n        const currentPage =\n          widthFromStart / event.nativeEvent.layoutMeasurement.width;\n        setAppearDate(weeks[currentPage * 7 + 6]);\n      },\n      [createPreviousTwoWeeks, weeks, setWeeks, flatListRef, setAppearDate],\n    );\n\n    const localMonth = useMemo(() => {\n      return format(appearDate, 'LLLL', { locale: createLocalWeek(language) });\n    }, [createLocalWeek, appearDate]);\n\n    return (\n      <View\n        style={{\n          backgroundColor: colors.white,\n          paddingTop: 5,\n          paddingBottom: 10,\n          ...styles.shadow,\n        }}\n      >\n        {showHeader && (\n          <View style={{ alignSelf: 'center', paddingVertical: 10 }}>\n            <Text style={{ fontSize: 18 }}>{localMonth}</Text>\n          </View>\n        )}\n        <Header language={language} />\n        <FlatList\n          ref={flatListRef}\n          data={weeks}\n          extraData={selectedDate}\n          initialScrollIndex={14}\n          horizontal\n          pagingEnabled\n          bounces\n          showsHorizontalScrollIndicator={false}\n          onEndReached={endReach}\n          onEndReachedThreshold={0.01}\n          onMomentumScrollEnd={momentumEnd}\n          getItemLayout={(_, index) => ({\n            length: itemWidht,\n            offset: itemWidht * index,\n            index,\n          })}\n          renderItem={({ item }) => {\n            return (\n              <WeekItem\n                date={item}\n                selectedDate={formatDate(item) === formatDate(date)}\n                onSelectDate={selectDate}\n                selectedColor={selectedColor}\n                key={item.toDateString()}\n              />\n            );\n          }}\n        />\n      </View>\n    );\n  },\n);\n"]}