{"version":3,"sources":["calendar.tsx"],"names":["CalendarComponent","date","language","onPressDate","selectedColor","showMonth","shadow","showHeader","selectedDate","setSelectedDate","appearDate","setAppearDate","flatListRef","getWholeWeek","createWholeWeek","wholeWeek","getWholeWeeks","createWholeWeeks","wholeWeeks","selectDate","d","weeks","setWeeks","endReach","n","slice","w","createNextTwoWeeks","momentumEnd","event","widthFromStart","nativeEvent","contentOffset","x","screenWidth","b","current","scrollToIndex","animated","index","currentPage","layoutMeasurement","width","createPreviousTwoWeeks","localMonth","locale","createLocalWeek","backgroundColor","colors","white","paddingTop","paddingBottom","styles","alignSelf","paddingVertical","fontSize","_","length","itemWidht","offset","item","toDateString"],"mappings":"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","sourcesContent":["import React, {\n  FC,\n  useState,\n  useMemo,\n  useCallback,\n  memo,\n  useRef,\n  LegacyRef,\n} from 'react';\nimport {\n  CalendarProps,\n  createWholeWeek,\n  formatDate,\n  createWholeWeeks,\n  itemWidht,\n  ScrollEvent,\n  createNextTwoWeeks,\n  createPreviousTwoWeeks,\n  screenWidth,\n  colors,\n  styles,\n  createLocalWeek,\n} from '../lib';\nimport { Header } from './header';\nimport { WeekItem } from './weekItem';\nimport { View, FlatList, unstable_batchedUpdates, Text } from 'react-native';\nimport { format } from 'date-fns';\n\nexport const CalendarComponent: FC<CalendarProps> = memo(\n  ({ date, language, onPressDate, selectedColor, showMonth, shadow }) => {\n    const showHeader = showMonth ?? true;\n    const [selectedDate, setSelectedDate] = useState(date);\n    // to get current page's month\n    const [appearDate, setAppearDate] = useState(date);\n    const flatListRef: LegacyRef<any> = useRef<FlatList>();\n    const getWholeWeek = useCallback(createWholeWeek, [createWholeWeek]);\n    const wholeWeek = useMemo(() => {\n      return getWholeWeek(selectedDate);\n    }, [selectedDate, getWholeWeek]);\n    const getWholeWeeks = useCallback(createWholeWeeks, [createWholeWeeks]);\n    const wholeWeeks = useMemo(() => {\n      return getWholeWeeks(selectedDate, wholeWeek);\n    }, [selectedDate, wholeWeek]);\n\n    const selectDate = useCallback(\n      (d: Date) => {\n        onPressDate(d);\n      },\n      [onPressDate],\n    );\n\n    const [weeks, setWeeks] = useState(wholeWeeks);\n\n    const endReach = useCallback(() => {\n      const n = createNextTwoWeeks(weeks.slice(-1)[0], []);\n      setWeeks(w => {\n        return [...w, ...n];\n      });\n    }, [weeks, createNextTwoWeeks, setWeeks]);\n\n    const momentumEnd = useCallback(\n      (event: ScrollEvent) => {\n        const widthFromStart = event.nativeEvent.contentOffset.x;\n        if (widthFromStart < screenWidth) {\n          const b = createPreviousTwoWeeks(weeks[0], []);\n          unstable_batchedUpdates(() => {\n            setWeeks(w => {\n              return [...b, ...w];\n            });\n            flatListRef.current.scrollToIndex({ animated: false, index: 14 });\n          });\n        }\n        const currentPage =\n          widthFromStart / event.nativeEvent.layoutMeasurement.width;\n        setAppearDate(weeks[currentPage * 7 + 6]);\n      },\n      [createPreviousTwoWeeks, weeks, setWeeks, flatListRef, setAppearDate],\n    );\n\n    const localMonth = useMemo(() => {\n      return format(appearDate, 'LLLL', { locale: createLocalWeek(language) });\n    }, [createLocalWeek, appearDate]);\n\n    return (\n      <View\n        style={\n          shadow\n            ? {\n                backgroundColor: colors.white,\n                paddingTop: 5,\n                paddingBottom: 10,\n                ...styles.shadow,\n              }\n            : {\n                backgroundColor: colors.white,\n                paddingTop: 5,\n                paddingBottom: 10,\n              }\n        }\n      >\n        {showHeader && (\n          <View style={{ alignSelf: 'center', paddingVertical: 10 }}>\n            <Text style={{ fontSize: 18 }}>{localMonth}</Text>\n          </View>\n        )}\n        <Header language={language} />\n        <FlatList\n          ref={flatListRef}\n          data={weeks}\n          extraData={selectedDate}\n          initialScrollIndex={14}\n          horizontal\n          pagingEnabled\n          bounces\n          showsHorizontalScrollIndicator={false}\n          onEndReached={endReach}\n          onEndReachedThreshold={0.01}\n          onMomentumScrollEnd={momentumEnd}\n          getItemLayout={(_, index) => ({\n            length: itemWidht,\n            offset: itemWidht * index,\n            index,\n          })}\n          renderItem={({ item }) => {\n            return (\n              <WeekItem\n                date={item}\n                selectedDate={formatDate(item) === formatDate(date)}\n                onSelectDate={selectDate}\n                selectedColor={selectedColor}\n                key={item.toDateString()}\n              />\n            );\n          }}\n        />\n      </View>\n    );\n  },\n);\n"]}